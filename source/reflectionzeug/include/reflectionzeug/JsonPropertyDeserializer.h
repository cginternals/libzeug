#pragma once

#include <reflectionzeug/reflectionzeug_api.h>

#include <reflectionzeug/AbstractPropertyDeserializer.h>

#ifdef USE_STD_REGEX
    #include <regex>

    namespace regex_namespace = std;
#else
    #include <boost/regex.hpp>

    namespace regex_namespace = boost;
#endif
#include <list>

#include <reflectionzeug/Variant.h>

namespace reflectionzeug
{

class PropertyGroup;

/**
 * \brief Loads values of a property hierachy from a JSON file.
 * This is not a complete JSON parser and should never be used as such.
 * It is only suitable for the JSON files generated by the JsonPropertySerializer
 * \see JsonPropertySerializer
 */
class REFLECTIONZEUG_API JsonPropertyDeserializer : public AbstractPropertyDeserializer
{
public:
    JsonPropertyDeserializer();
    virtual ~JsonPropertyDeserializer();

    virtual bool deserialize(PropertyGroup & group, const std::string & filePath) override;

protected:
    bool isGroupDeclaration(const std::string & line);
    bool isGroupEnd(const std::string & line);
    bool isPropertyDeclaration(const std::string & line);

    bool updateCurrentGroup(const std::string & line);
    void endGroup();
    bool setPropertyValue(const std::string & line);

    Variant constructVariant(const std::string & value) const;

protected:
    PropertyGroup * m_rootGroup;
    regex_namespace::smatch m_matches;
    std::list<PropertyGroup *> m_groupStack;
    std::string m_currentGroupName;
};

} // namespace reflectionzeug
